/// <reference lib="dom" />
/**
 * Object Image
 * @public
 */
type FFFImage = Partial<HTMLImageElement> & {
    sources?: Partial<HTMLSourceElement>[];
    figcaption?: string;
};
/**
 * Object Audio
 * @public
 */
type FFFAudio = Partial<HTMLAudioElement> & {
    sources?: Partial<HTMLSourceElement>[];
};
/**
 * Object Video
 * @public
 */
type FFFVideo = Partial<HTMLVideoElement> & {
    sources?: Partial<HTMLSourceElement>[];
};
/**
 * Author
 * @public
 */
type FFFAuthor = {
    /** the author's name. */
    name?: string;
    /** the URL of a site owned by the author. */
    url?: string;
    /** the URL for an image for the author. */
    avatar?: string;
};
/**
 * Base Variables
 * @public
 */
type FFFBase = {
    /** the title of article, non-article posts may omit titles. */
    title?: string;
    /** plain text sentence or two describing the post. */
    summary?: string;
    /** tags array, any plain text values you want. */
    tags?: string[];
    /** categories array, any plain text values you want. */
    categories?: string[];
    /** flags array, any plain text values you want. */
    flags?: string[];
};
/**
 * DateTime Vaeriables
 * @public
 */
type FFFDateTime = {
    /** the created date of the post. */
    created?: string | number;
    /** the updated date of the post. */
    updated?: string | number;
    /** the published date of the post. */
    published?: string | number;
    /** datetime the event starts. */
    start?: string | number;
    /** datetime the event ends. */
    end?: string | number;
};
/**
 * Media Variables
 * @public
 */
type FFFMedia = {
    /** the main image for article or photo post. */
    image?: string | FFFImage;
    /** the image for multi-photo post. */
    images?: string[] | FFFImage[];
    /** the main audio for audio post. */
    audio?: string | FFFAudio;
    /** the main video for video post. */
    video?: string | FFFVideo;
    /** image alternate text. */
    alt?: string;
};
/**
 * Mention Variables
 * @public
 */
type FFFMention = {
    /** indicates this post is a bookmark of another URL. */
    bookmark_of?: string;
    /** the URL which the post is considered a "like" (favorite, star) of. */
    like_of?: string;
    /** the URL which the post is considered a "repost" of. */
    repost_of?: string;
    /** URL which the post is considered reply to. */
    in_reply_to?: string;
};
/**
 * Extra Variables
 * @public
 */
type FFFExtra = {
    /** specifies one or more post authors. */
    authors?: FFFAuthor[];
    /** the primary language for the post. */
    lang?: string | string[];
    /** location the post was posted from. */
    location?: string;
    /** URL(s) of syndicated copies of this post. */
    syndication?: string | string[];
    /** the URL of the venue/location h-card which the h-entry is considered a "checkin" of. */
    checkin?: string;
    /** a reply to an event that says whether the sender is attending. */
    rsvp?: 'yes' | 'no' | 'maybe' | 'interested';
};
/**
 * Type definition of the {@link https://fff.js.org | FFF Flavored Frontmatter}.
 * @public
 */
type FFFFlavoredFrontmatter = FFFBase & FFFDateTime & FFFMedia & FFFMention & FFFExtra;

/**
 * From FFF to JSON Feed Item (Version 1.1)
 * @beta
 * @param fm - FFF Flavored Frontmatter
 * @returns - JSON Feed Item Object (without content / id / url)
 * @see {@link https://jsonfeed.org/version/1.1}
 */
declare const toJSONFeedItem: (fm: FFFFlavoredFrontmatter, item?: object) => object;
/**
 * From FFF to JF2 Feed Child (Editor's Draft 09 February 2019)
 * @alpha
 * @param fm - FFF Flavored Frontmatter
 * @returns - JF2 Feed Child Object (without content / uid / url)
 * @see {@link https://jf2.spec.indieweb.org/#jf2feed}
 */
declare const toJF2FeedChild: (fm: FFFFlavoredFrontmatter, child?: object) => object;

/**
 * FFF Flavor Transform Preset Value
 * @public
 */
type FFFTransformPresetValue<T extends Record<string, unknown> = Record<string, unknown>> = string | ((fm: FFFFlavoredFrontmatter & T) => unknown);
/**
 * Flavor Transform Preset
 * @public
 * @see {@link https://fff.js.org/concepts/flavor-transform.html#fff-transform-preset}
 */
type FFFTransformPreset<T extends Record<string, unknown> = Record<string, unknown>> = {
    [key in keyof (FFFFlavoredFrontmatter & T & Record<string, unknown>)]: FFFTransformPresetValue<T & Record<string, unknown>>;
};
/**
 * Flavor Transform Function
 * @public
 * @param fm - Input Frontmatter
 * @param presets - FFFTransformPreset[]
 * @returns - FFF Flavored Frontmatter
 * @see {@link https://fff.js.org/concepts/flavor-transform.html#transform-function}
 * @example
 * ```ts
 * import { transform } from 'fff-flavored-frontmatter'
 *
 * const fm = transform({
 *   date: '2022-07-18',
 *   lastmod: '2023-06-04',
 * }, [{
 *   created: 'date',
 *   updated: 'lastmod',
 * }])
 *
 * // { created: '2022-07-18', date: '2022-07-18', lastmod: '2023-06-04', updated: '2023-06-04' }
 * console.log(fm)
 * ```
 */
declare const transform: <T extends Record<string, unknown> = Record<string, unknown>>(fm: T, presets: FFFTransformPreset[]) => FFFBase & FFFDateTime & FFFMedia & FFFMention & FFFExtra & T;

/**
 * Stict Preset Options
 * @public
 */
type StrictPresetOptions = {
    categories?: boolean;
    lang?: 'string' | 'array';
    media?: {
        type?: 'string' | 'object';
        array?: boolean;
    };
};
/**
 * Strict - FFF Transform Preset
 * @beta
 */
declare const strict: (strict: StrictPresetOptions) => FFFTransformPreset;

/**
 * Supported Post Type
 * @beta
 * @see {@link https://ptd.spec.indieweb.org/#algorithm}
 * @see {@link https://indieweb.org/posts#Types_of_Posts}
 */
type postType = 'event' | 'rsvp' | 'repost' | 'like' | 'bookmark' | 'reply' | 'video' | 'audio' | 'article' | 'photo' | 'note';
/**
 * Post Type Discovery
 * @beta
 * @param fm - FFF Flavored Frontmatter
 * @returns lower case post type
 * @see {@link https://ptd.spec.indieweb.org/#algorithm}
 * @see {@link https://indieweb.org/posts#Types_of_Posts}
 */
declare const postTypeDiscovery: (fm: FFFFlavoredFrontmatter) => postType;

export { FFFAudio, FFFAuthor, FFFBase, FFFDateTime, FFFExtra, FFFFlavoredFrontmatter, FFFImage, FFFMedia, FFFMention, FFFTransformPreset, FFFTransformPresetValue, FFFVideo, StrictPresetOptions, postType, postTypeDiscovery, strict, toJF2FeedChild, toJSONFeedItem, transform };
