var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
import { strict, transform } from "fff-flavored-frontmatter";

// src/autofill.ts
var autofill_exports = {};
__export(autofill_exports, {
  fs: () => fs,
  git: () => git,
  path: () => path
});
import { execFileSync } from "node:child_process";
import { statSync } from "node:fs";
import { EOL } from "node:os";
var path = {
  urara: (path2) => path2.replace("/src/routes/", "/urara/")
};
var fs = (path2) => {
  const { ctime, mtime } = statSync(path2);
  return {
    created: ({ created }) => created ?? ctime,
    updated: ({ updated }) => updated ?? mtime
  };
};
var git = (path2) => ({
  created: ({ created }) => created ?? execFileSync(
    "git",
    ["log", "--diff-filter=A", "--follow", "--format=%ai", "--", path2],
    { encoding: "utf8" }
  ).trim().split(EOL).pop(),
  updated: ({ updated }) => updated ?? execFileSync("git", ["log", "-1", "--pretty=format:%ai", "--", path2], {
    encoding: "utf8"
  }).trim()
});

// src/index.ts
var remarkFFF = (options = {
  presets: [],
  target: "mdsvex"
}) => (_tree, file) => {
  const post = file;
  const path2 = post.filename ?? post.path;
  const fm = transform(
    {
      /* eslint-disable unicorn/no-nested-ternary */
      ...options.target === "mdsvex" ? post.data.fm : options.target === "astro" ? post.data.astro.frontmatter : options.target === "nuxt" ? post.data : post.data
      /* eslint-enable unicorn/no-nested-ternary */
    },
    [
      ...options.presets,
      ...options.autofill?.provider ? [
        autofill_exports[options.autofill.provider](
          options.autofill.path ? typeof options.autofill.path === "function" ? options.autofill.path(path2) : path[options.autofill.path](path2) : post.filename
        )
      ] : [],
      ...options.strict ? [strict(options.strict)] : []
    ]
  );
  switch (options.target) {
    case "mdsvex": {
      file.data.fm = fm;
      break;
    }
    case "astro": {
      file.data.astro = {
        ...file.data.astro,
        frontmatter: fm
      };
      break;
    }
    case "nuxt": {
      file.data = fm;
      break;
    }
    default: {
      file.data = fm;
    }
  }
};
var src_default = remarkFFF;
export {
  src_default as default,
  fs,
  git,
  path,
  remarkFFF
};
