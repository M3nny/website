"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// fff.ts
var fff_exports = {};
__export(fff_exports, {
  postTypeDiscovery: () => postTypeDiscovery,
  strict: () => strict,
  toJF2FeedChild: () => toJF2FeedChild,
  toJSONFeedItem: () => toJSONFeedItem,
  transform: () => transform
});
module.exports = __toCommonJS(fff_exports);

// src/utils/presets/strict.ts
var strictMediaTransform = (options, media) => typeof media === "string" ? options?.type === "object" ? { src: media } : media : options?.type === "string" ? media?.src : media;
var strict = (strict2) => ({
  alt: ({ alt, image, images }) => alt ?? strict2.media?.type === "string" ? (image || images?.[0])?.alt : void 0,
  audio: ({ audio }) => strictMediaTransform(strict2.media, audio),
  image: ({ image, images }) => strictMediaTransform(
    strict2.media,
    strict2.media?.array ? image : image ?? images?.[0]
  ),
  images: ({ image, images }) => [...images ?? [], ...strict2.media?.array ? [image] : []].map(
    (image2) => strictMediaTransform(strict2.media, image2)
  ),
  lang: ({ lang }) => strict2.lang === "array" ? typeof lang === "string" ? [lang] : lang : typeof lang === "object" ? lang[0] : lang,
  tags: ({ tags, categories }) => strict2.categories ? tags : [...tags ?? [], ...categories ?? []],
  video: ({ video }) => strictMediaTransform(strict2.media, video)
});

// src/utils/ptd.ts
var postTypeDiscovery = (fm) => {
  if (fm.flags?.includes("event"))
    return "event";
  else if (fm.rsvp && ["yes", "no", "maybe", "interested"].includes(fm.rsvp.toLowerCase()))
    return "rsvp";
  else if (fm.repost_of && new URL(fm.repost_of))
    return "repost";
  else if (fm.like_of && new URL(fm.like_of))
    return "like";
  else if (fm.bookmark_of && new URL(fm.bookmark_of))
    return "bookmark";
  else if (fm.in_reply_to && new URL(Array.isArray(fm.in_reply_to) ? fm.in_reply_to[0] : fm.in_reply_to))
    return "reply";
  else if (fm.video)
    return "video";
  else if (fm.audio)
    return "audio";
  else if (fm.title)
    return "article";
  else if (fm.images)
    return "photo";
  else
    return "note";
};

// src/utils/transform.ts
var transform = (fm, presets) => {
  for (const preset of presets) {
    for (const [output, input] of Object.entries(preset)) {
      fm = {
        ...fm,
        [output]: (typeof input === "function" ? input(fm) : fm[input]) ?? fm[output]
      };
    }
  }
  return fm;
};

// src/utils/feed.ts
var toJSONFeedItem = (fm, item) => {
  fm = transform(fm, [strict({
    categories: false,
    lang: "string",
    media: {
      array: false,
      type: "string"
    }
  })]);
  return {
    ...item,
    /**
     * JSON Feed IndieWeb Extension
     * @see {@link https://indieweb.org/JSON_Feed#IndieWeb_Extension}
     */
    _indieweb: {
      "bookmark-of": fm.bookmark_of,
      "in-reply-to": fm.in_reply_to,
      "like-of": fm.like_of,
      "repost-of": fm.repost_of,
      "syndication": fm.syndication,
      "type": postTypeDiscovery(fm)
    },
    authors: fm.authors,
    date_modified: fm.updated,
    date_published: fm.published ?? fm.created,
    image: fm.image,
    language: fm.lang,
    summary: fm.summary,
    tags: fm.tags,
    title: fm.title
    // TODO: https://www.jsonfeed.org/version/1.1/#attachments-a-name-attachments-a
    // TODO: https://www.jsonfeed.org/podcasting/
  };
};
var toJF2FeedChild = (fm, child) => {
  fm = transform(fm, [strict({
    categories: false,
    lang: "string",
    media: {
      array: false,
      type: "string"
    }
  })]);
  return {
    ...child,
    author: fm.authors && {
      name: fm.authors[0].name,
      photo: fm.authors[0].avatar,
      type: "card",
      url: fm.authors[0].url
    },
    category: fm.tags,
    featured: fm.title && fm.image,
    lang: fm.lang,
    name: fm.title,
    photo: fm.image,
    published: fm.published ?? fm.created,
    type: "entry",
    updated: fm.updated
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  postTypeDiscovery,
  strict,
  toJF2FeedChild,
  toJSONFeedItem,
  transform
});
